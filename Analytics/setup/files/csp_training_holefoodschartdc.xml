<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2023.2 (Build 227U)" ts="2023-11-03 15:15:09">
<CSP name="holefoodschartdc.csp" application="/csp/training/" default="1"><![CDATA[
<!DOCTYPE html>
<html>
	<head>
		<title>HoleFoods: Units, Revenue, Transactions YTD</title>
		<meta name="description" content="HoleFoods" />

		<!-- amCharts javascript sources -->
		<script src="amcharts/amcharts.js" type="text/javascript"></script>
		<script src="amcharts/serial.js" type="text/javascript"></script>
		<script src="zenCSLM.js" type="text/javascript"></script>
		<script src="DeepSee.js" type="text/javascript"></script>

		<script type="text/javascript">
		
	function initializePage() {
			
			console.log("initialize page");
			
			// Get the connection data.
			var username = document.getElementById('username').value;
			var pwd = document.getElementById('password').value;
			var host = document.getElementById('host').value;
			var instance = document.getElementById('instance').value;
			var namespace = document.getElementById('namespace').value;
		
			//create a configuration including a DeepSee connection.
		
			var configuration = {};
			configuration.widget = 'widget1';
			configuration.type = 'MDX';
			configuration.initialMDX = "SELECT NON EMPTY {[Measures].[Amount Sold],[Measures].[Units Sold],[Measures].[%COUNT]} \
		  		ON 0,NON EMPTY [Product].[P1].[Product Category].Members ON 1 \
		  		FROM [HOLEFOODS] %FILTER [DATEOFSALE].[ACTUAL].[YEARSOLD].&[NOW]";
			configuration.pivotName='';
			configuration.showTotals = false;
		
			configuration.connection = new DeepSeeConnection(username,pwd,"http://"+host+"/"+instance,"/api/deepsee/v1",namespace);
			
			//configuration.connection = new DeepSeeConnection(username,pwd,"http://localhost/irishealth","/api/deepsee/v1","TRAINING");
			
			/*Create data controller using configuration. Note dc variable not declared so has global scope.
			  When runQuery() returns, the drawChart method is invoked.
			*/
			dc = new DeepSeeDataController(configuration,drawChart);
			
			console.log("controller %o", dc);
			
			//Execute the query.
			dc.runQuery();
		
					
			
		}
		
	
	//Function for populating filter dropdown list with members of Outlet.H1.Region level	
		
	function drawMemberDropdown(data) {
	
			var memberDropdown = document.getElementById('memberDropdown');
			
			var data = DeepSeeUtils.getResultsAsArray(data);
			console.log("filter members %o",data);
			
			memberDropdown.options[0] = new Option("All Regions","All");
			
			for (var i = 0; i < data.length; ++ i) {
			memberDropdown.options[memberDropdown.options.length] = new Option(data[i].text,data[i].value);	
		
		
		}
		

	}
	
	//Function for applying the filter selected from the dropdown.
		
	function applyFilter() {
		var filterInfo = {};
		
		if (memberDropdown.options[memberDropdown.selectedIndex].text === "All Regions")
		{
			filterInfo.filterName = "Region";
			filterInfo.filterSpec = "[Outlet].&[All Outlet]"
			dc.applyFilter(filterInfo);	
			
		}
		else {
			
			filterInfo.filterName = "Region";
			filterInfo.filterSpec = "[Outlet].[H1].[Region]" + '.' + memberDropdown.options[memberDropdown.selectedIndex].value;
			console.log("Filter %o",filterInfo);
			dc.applyFilter(filterInfo);
			
		}
		
		
		
	}
		
	function drawChart(dc) {
			//Get the results from the data controller.
			var resultSet = dc.getCurrentData();	
			
			var chartDataPoint = [];
			var chartLabel=[];
			var chartData = [];	
		
			//Create an array of data points from the result set. Array will be given to chart.	
			for (var i = 1; i <= resultSet.getRowCount(); ++i) {
				for (var j = 1; j <= resultSet.getColumnCount(); ++j) {
					chartDataPoint[j] = resultSet.getOrdinalValue(i,j);
				}
				chartLabel = resultSet.getOrdinalLabel(2,i);	
				chartData[chartData.length] = { "Category":chartLabel[0],"Units Sold":chartDataPoint[2], 
											"Revenue":chartDataPoint[1], "Transactions":chartDataPoint[3]};	
			}
			
					
			var memberDropdown = document.getElementById('memberDropdown');
			
			if (dc.filterState.length === 0 || dc.filterState[0].filterSpec==='[Outlet].&[All Outlet]'){
				
				var region = "All Regions";	
				
			}
			
			else{
				//strip off the &[ and ] from the member key to make the display nicer.
				var region = dc.filterState[0].filterSpec.split("&")[1].replace(/[\[\]]/g,'');
			
				
			}
			
			
			/*	Retrieve the members of the Region level to populate the filter dropdown, but do this only if it is
		 		not already populated. 
			*/ 
			
			if(!memberDropdown.options.length){
				filterCubeName = resultSet.getCubeName();
				console.log(filterCubeName);
				DeepSeeUtils.getMembersForFilter(dc.connection,filterCubeName,"[Outlet].[H1].[Region]",drawMemberDropdown)	
			}
			
		
			//create the chart. Note the value of dataProvider is our data array. 
			AmCharts.makeChart("chartdiv", {
				
										"colors": [
										
										"#fdd400","#0000CC","#448e4d"],
						
										"type": "serial",
    									 "theme": "none",
										 "categoryField": "Category",
											"rotate": true,
											"startDuration": 1,
										"categoryAxis": {
											"gridPosition": "start",
											"position": "left"
											},
										"trendLines": [],
										"graphs": [
													{
														"balloonText": "Units Sold:[[value]]",
														"fillAlphas": 1,
														"id": "AmGraph-1",
														"lineAlpha": 0.2,
														"title": "Units Sold",
														"type": "column",
														"valueField": "Units Sold"
													},
		
													{
														"balloonText": "Revenue:$[[value]]",
														"fillAlphas": 1,
														"id": "AmGraph-2",
														"lineAlpha": 0.2,
														"title": "Revenue",
														"type": "column",
														"valueField": "Revenue"
													},
		
													{
														"balloonText": "Transactions:[[value]]",
														"fillAlphas": 1,
														"id": "AmGraph-3",
														"lineAlpha": 0.2,
														"title": "Transactions",
														"type": "column",
														"valueField": "Transactions"
													}
		
												],
											"guides": [],
											"valueAxes": [
													{
														"id": "ValueAxis-1",
														"position": "top",
														"axisAlpha": 0
													}
												],
											"allLabels": [],
											"balloon": {},
											"titles": [],
											//This is the key spot where we provide the data to the chart.
											"dataProvider":chartData,
    										"export": {
    												"enabled": true
     												},
     
     										"legend": {
														"enabled": true,
														"useGraphSettings": true
													},
     										"titles": [
														{
															"id": "Title-1",
															"size": 15,
															"text": "Units, Revenue, and Transactions YTD:" + "  " + region
														}
													],

						});
			
			
		}
		</script>
	</head>
	<body>
	<div id="maindiv" width = "100%">
<form width="100%">
Username: <input type="text" value="SuperUser" name="username" id="username">    Password: <input type="password" value="SYS" name="password" id="password">  Host: <input type="text" value="localhost" name="host" id="host">  instance: <input type="text" value="training" name="instance" id="instance"> namespace: <input type="text" value="training" name="namespace" id="namespace"><br><br>
</form>
<button onclick="initializePage()">
Show Chart
</button>
<br>
<button onclick="applyFilter()">
Apply Filter
</button>
<select id="memberDropdown" selected=""></select>
<br>
</div>
		<div id="chartdiv" style="width: 1000px; height: 800px; background-color: #FFFFFF;" ></div>
	</body>
</html>

]]></CSP>
</Export>
