<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2 (Build 736)" ts="2016-11-02 12:00:54">
<Class name="Training.Analytics.Utils">
<Super>%RegisteredObject</Super>
<TimeChanged>64224,42090.649835</TimeChanged>
<TimeCreated>62307,62695.06489</TimeCreated>

<Method name="UpdateData">
<Description>
Updates existing records in HoleFoods.Transaction. Updates the records for a range of ids. 	</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pBegin:%Integer,pEnd:%Integer,pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	Set tChangeCount = 0
	Set tRecordCount = 100000
	For n=pBegin:1:pEnd {
		Set tID = n
		Set tRecord = ##class(HoleFoods.Transaction).%OpenId(tID)
		If $IsObject(tRecord) {
			Set tRecord.UnitsSold = $S($R(10)<8:1+tRecord.UnitsSold,1:$R(8)+1+tRecord.UnitsSold)
			Set tRecord.Discount = $S($R(10)<6:0,$R(10)<7:0.1,$R(10)<7:0.2,1:0.5)
			Set tRecord.AmountOfSale = tRecord.UnitsSold * tRecord.Product.Price * (1 - tRecord.Discount)
			Set tSC = tRecord.%Save()
			If $$$ISOK(tSC) {
				Set tChangeCount = tChangeCount + 1
				If (pVerbose) Write $C(13,27)_"[0J"_$FN(+$G(tChangeCount),",",0)_" record(s) updated"
			}
		}
	}
	If (pVerbose) Write $C(13,27)_"[0J"_$FN(+$G(tChangeCount),",",0)_" record(s) updated"
]]></Implementation>
</Method>

<Method name="GetDiskInfo">
<ClassMethod>1</ClassMethod>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	//Get the total and free space on c drive in GB
	Set status=##class(%Library.File).GetDirectorySpace("c:\",.free,.total,2)
	
	Set up=1
	Set Frank = $ListBuild("Frank",free,total, up, "TR1")
	
	Set m=$Random(total-free)
	Set n=$Random(free)
	Set up=$Random(2)
	
	if up{
	Set Sammy = $ListBuild("Sammy", free + m, total + n, up, "Lou's Office")
	}
	else{
	Set Sammy = $ListBuild("Sammy", "N/A", "N/A", up, "Lou's Office")	
	}
	
	Set m=$Random(total-free)
	Set n=$Random(free)
	Set up=$Random(2)
	
	if up{
	Set Deano = $ListBuild("Deano", free + m, total + n, up, "TR2")
	}
	else{
	Set Deano = $ListBuild("Deano", "N/A", "N/A", up, "TR2")
	}
	Quit $ListBuild(Frank,Sammy,Deano)
]]></Implementation>
</Method>

<Method name="ChangeACity">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOldName:%String,pNewName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT %ID into :id from HoleFoods.Outlet where City=:pOldName)
	Set status = 0
	
	If SQLCODE=0{
		set tOutlet=##class(HoleFoods.Outlet).%OpenId(id)
	
		If $ISOBJECT(tOutlet){
			
			Set tOutlet.City=pNewName
			Set status=tOutlet.%Save()
		}

	}
	Quit status
]]></Implementation>
</Method>

<Method name="SetDefaultFilterValueByRole">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set filterValue=""
	
	If $Find($Roles,"AsiaRegionRole")
	{
		
		Set filterValue = "&[Asia]"
			
	}
	ElseIf $Find($Roles,"EuropeRegionRole")
	{
		Set filterValue = "&[Europe]"
		
	}
	ElseIf $Find($Roles,"NAmericaRegionRole")
	{
		
		Set filterValue="&[N. America]"	
		
	}
	ElseIf $Find($Roles,"SAmericaRegionRole")
	{
		
		Set filterValue="&[S. America]"	
		
	}
	
	Else
	{
		
	}
	
	Quit filterValue
]]></Implementation>
</Method>
</Class>
</Export>
