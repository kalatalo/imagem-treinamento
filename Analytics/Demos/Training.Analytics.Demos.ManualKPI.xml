<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1 (Build 656U)" ts="2016-04-06 15:28:58">
<Class name="Training.DeepSee.Demos.ManualKPI">
<Description>
DSF.TestKPI</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>64014,55680.933638</TimeChanged>
<TimeCreated>62430,34262.865329</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="Training/Analytics/Demos/ManualKPI" sourceType="manual"
 caption=""
>
	<property columnNo="1" name="Used" displayName="In Use"/>
	
	<property columnNo="2" name="Available" displayName="Available"/>
	
	<property columnNo="3" name="Status" displayName="Status"/>

	<property columnNo="4" name="Location" displayName="Location"/>
	
	<filter name="Server" valueList="Deano,Frank,Sammy" multiSelect="false"/>
	
	<action name="MyAction"/>
	
</kpi>
]]></Data>
</XData>

<Method name="%OnExecute">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Get some randomized disk use/capacity/server status info.	
	Set list = ##class(Training.Analytics.Utils).GetDiskInfo()
	
	Set tFilter = ..%filterValues

	Set ..%seriesCount=0

	
	for i=1:1:$ListLength(list) {
		
		If ( (tFilter.Server = "") || (tFilter.Server = $List($List(list,i),1)))
		{
		Set ..%seriesCount=..%seriesCount + 1
		Set ..%seriesNames(..%seriesCount)=$List($List(list,i),1)
		Set ..%data(..%seriesCount,"Used")=$List($List(list,i),2)
		Set ..%data(..%seriesCount,"Available")=$List($List(list,i),3)
		Set ..%data(..%seriesCount,"Status")=$List($List(list,i),4)
		Set ..%data(..%seriesCount,"Location")=$List($List(list,i),5)
		}
		
	 Else{
		 
		 continue
		 
	 }
	
		
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetMDX">
<Description>
Return an MDX statement to execute.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDashboardAction">
<Description>
This callback is invoked from a dashboard when an action defined by this dashboard is invoked.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// pAction is the name of the action (as defined in the XML list).
	// pContext contains information from the client
	// and can be used to return information.
	
	if pAction = "MyAction"
	{
		
		Set pContext.command = "alert: "_pContext.valueList
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
